@{
    ViewData["Title"] = "Kullanıcı Yönetimi";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Kullanıcı Listesi</h3>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover custom-table">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Kullanıcı Adı</th>
                        <th>Roller</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody id="userTableBody">
                    <!-- Veriler JavaScript ile doldurulacak -->
                </tbody>
            </table>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div class="showing-entries">
                    Toplam <span id="totalRecords">0</span> kayıttan <span id="showingRecords">0</span> tanesi gösteriliyor
                </div>
                <div class="custom-pagination">
                    <button id="prevPage" class="btn btn-outline-primary btn-sm"><i class="fas fa-chevron-left"></i></button>
                    <span id="currentPage" class="mx-3">Sayfa 1</span>
                    <button id="nextPage" class="btn btn-outline-primary btn-sm"><i class="fas fa-chevron-right"></i></button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Rol Güncelleme Modal -->
<div class="modal fade" id="updateRoleModal" tabindex="-1" role="dialog" aria-labelledby="updateRoleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateRoleModalLabel">Kullanıcı Rolünü Güncelle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="selectedUserId" />
                <div class="form-group">
                    <label>Email:</label>
                    <span id="userEmail" class="form-control-plaintext"></span>
                </div>
                <div class="form-group">
                    <label for="roleSelect">Rol Seçin:</label>
                    <select id="roleSelect" class="form-control">
                        <option value="Admin">Admin</option>
                        <option value="Gazetici">Gazetici</option>
                        <option value="User">User</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveRoleButton">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<style>
    .custom-table {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .custom-table thead {
        background-color: #f8f9fa;
    }

    .custom-table th {
        border-top: none;
        font-weight: 600;
        padding: 15px;
        color: #495057;
    }

    .custom-table td {
        padding: 12px 15px;
        vertical-align: middle;
    }

    .custom-table tbody tr {
        transition: all 0.3s ease;
    }

    .custom-table tbody tr:hover {
        background-color: #f8f9fa;
        transform: scale(1.001);
    }

    .custom-pagination {
        display: flex;
        align-items: center;
    }

    .showing-entries {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .btn-action {
        padding: 5px 10px;
        margin: 0 3px;
        transition: all 0.3s ease;
    }

    .btn-action:hover {
        transform: translateY(-2px);
    }
</style>

@section Scripts {
    <script>
        // Global değişkenler
        let currentPage = 1;
        const itemsPerPage = 10;
        let allUsers = [];

        // Global fonksiyon olarak tanımlıyoruz
        function loadUsers() {
            fetch('/Admin/GetUsers')
                .then(response => response.json())
                .then(data => {
                    allUsers = Array.isArray(data) ? data : Object.values(data);
                    updateTable();
                    updatePagination();
                })
                .catch(error => {
                    console.error('Veri yükleme hatası:', error);
                    allUsers = [];
                    updateTable();
                    updatePagination();
                });
        }

        document.addEventListener('DOMContentLoaded', function () {
            // İlk yükleme
            loadUsers();

            // Sayfalama butonları için event listener'lar
            document.getElementById('prevPage').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    updateTable();
                    updatePagination();
                }
            });

            document.getElementById('nextPage').addEventListener('click', () => {
                const totalPages = Math.ceil(allUsers.length / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    updateTable();
                    updatePagination();
                }
            });
        });

        // Rol güncelleme fonksiyonu
        $('#saveRoleButton').click(function () {
            var userId = $('#selectedUserId').val();
            var newRole = $('#roleSelect').val();

            $.ajax({
                url: '/Admin/UpdateUserRole',
                type: 'POST',
                data: { userId: userId, newRole: newRole },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#updateRoleModal').modal('hide');
                        loadUsers(); // Global fonksiyonu çağırıyoruz
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function (error) {
                    toastr.error("Bir hata oluştu!");
                }
            });
        });

        // Silme fonksiyonu
        function deleteUser(userId) {
            if (confirm('Kullanıcıyı silmek istediğinize emin misiniz?')) {
                $.ajax({
                    url: '/Admin/DeleteUser',
                    type: 'POST',
                    data: { userId: userId },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            loadUsers(); // Global fonksiyonu çağırıyoruz
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (error) {
                        toastr.error("Silme işlemi sırasında bir hata oluştu!");
                    }
                });
            }
        }

        // Tabloyu güncelle
        function updateTable() {
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            
            if (!Array.isArray(allUsers)) {
                console.error('allUsers bir dizi değil:', allUsers);
                allUsers = [];
            }
            
            const paginatedUsers = allUsers.slice(start, end);
            const tbody = document.getElementById('userTableBody');
            tbody.innerHTML = '';

            paginatedUsers.forEach(user => {
                const roles = user.roles ? user.roles.join(', ') : '';
                const tr = document.createElement('tr');
                const safeRoles = encodeURIComponent(JSON.stringify(user.roles || []));
                
                tr.innerHTML = `
                    <td>${user.email || ''}</td>
                    <td>${user.userName || ''}</td>
                    <td>${roles}</td>
                    <td>
                        <button class="btn btn-primary btn-sm btn-action" 
                            onclick="openUpdateModal('${user.id}', '${user.email || ''}', '${safeRoles}')">
                            <i class="fas fa-user-edit"></i>
                        </button>
                        <button class="btn btn-danger btn-sm btn-action" 
                            onclick="deleteUser('${user.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(tr);
            });

            document.getElementById('totalRecords').textContent = allUsers.length;
            document.getElementById('showingRecords').textContent = paginatedUsers.length;
            document.getElementById('currentPage').textContent = `Sayfa ${currentPage}`;
        }

        // Sayfalama kontrollerini güncelle
        function updatePagination() {
            const totalPages = Math.ceil(allUsers.length / itemsPerPage);
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
        }

        // Modal açma fonksiyonu
        function openUpdateModal(userId, email, roles) {
            try {
                const decodedRoles = JSON.parse(decodeURIComponent(roles));
                $('#selectedUserId').val(userId);
                $('#userEmail').text(email);
                $('#roleSelect').val(decodedRoles[0] || 'User');
                $('#updateRoleModal').modal('show');
            } catch (error) {
                console.error('Modal açma hatası:', error);
                toastr.error("Modal açılırken bir hata oluştu!");
            }
        }
    </script>
}